<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">

	<!-- 向Spring容器注册(自动注入)以下四个BeanPostProcessor: 即可使用注解方式
		1.AutowiredAnnotationBeanPostProcessor. @Autowired注解
		2.CommonAnnotationBeanPostProcessor. @Resource,@PostConstruct,@PreDestroy 注解
		3.PersistenceAnnotationBeanPostProcessor. @PersistenceContext 注解
		4.RequiredAnnotationBeanPostProcessor. @Required 注解  
		 -->
	<!-- spring默认配置 ：自动识别上述内容中的相应注释-->
	<context:annotation-config />
	<!-- <context:annotation-config/>与<context:component-scan base-package=”xx.xx”/>
		两者作用相似,如果两者都进行了配置，则只有前者有效。 -->
		
	<!-- 指定扫描注解路径：controller层 -->
	<!-- 除了具有<context:annotation-config>的功能之外,
		<context:component-scan>还可以在指定的package下扫描以及注册javabean.
		-->
	<context:component-scan base-package="com.atlantis.controller">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- ================================================================================ -->

	<!-- 注解驱动 -->
	<!-- org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping -->
	<!-- org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter -->
	<!-- springmvc默认配置:自动注册上面注释内容的两个bean,这两个bean是spring MVC为@Controllers分发请求所必须的 -->
	<mvc:annotation-driven />

	<!-- ================================================================================ -->

	<!-- 对进入DispatcherServlet的URL进行筛查.
		如果发现是静态资源的请求,就将该请求转由Web应用服务器默认的Servlet处理.
		如果不是静态资源的请求,才由DispatcherServlet继续处理. -->
	<mvc:default-servlet-handler />
	
	<!-- 静态资源 -->
	<!-- <mvc:resources location="/js/" mapping="/js/**"></mvc:resources> -->
	<mvc:resources location="/lib/" mapping="/lib/**"></mvc:resources>
	<mvc:resources location="/static/" mapping="/static/**"></mvc:resources>
	<!-- <mvc:resources location="/files/" mapping="/files/**"></mvc:resources> -->
	
	<!-- ================================================================================ -->

	<!-- 视图解析器 -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<!-- ================================================================================ -->
	
	<!-- 拦截器配置 -->
	<!-- 拦截所有控制器 -->
	<!-- <mvc:interceptors>
		<bean class="com.atlantis.interceptor.LoginInterceptor"></bean>
	</mvc:interceptors> -->
	
</beans>
